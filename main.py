# -*- coding: utf-8 -*-
import os
import logging
import datetime
import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from db import init_db, add_op, get_balance, get_history
from ai_helper import parse_free_text, ai_answer

# ---- –¢–í–û–ò –ù–ê–°–¢–†–û–ô–ö–ò ----
TOKEN = "7611168200:AAFkdTWAz1xMawJOKF0Mu21ViFA5Oz8wblk"
AUTHORIZED_IDS = [564415186, 1038649944]  # —Ç—ã –∏ –±—Ä–∞—Ç
PUBLIC_URL = "https://razzakovstelegrambot.up.railway.app"
# -------------------------

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

INCOME_CATEGORIES = ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ë–æ–Ω—É—Å", "–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤", "–ü–µ—Ä–µ–≤–æ–¥", "–î—Ä—É–≥–æ–µ (–¥–æ—Ö–æ–¥)"]
EXPENSE_CATEGORIES = ["–ï–¥–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ó–¥–æ—Ä–æ–≤—å–µ", "–ê—Ä–µ–Ω–¥–∞", "–ó–∞–∫—É–ø–∫–∏", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–î—Ä—É–≥–æ–µ"]


def check_access(user_id: int) -> bool:
    return user_id in AUTHORIZED_IDS


def main_menu() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ—Ö–æ–¥", callback_data="add_income"),
         InlineKeyboardButton("‚ûñ –†–∞—Å—Ö–æ–¥", callback_data="add_expense")],
        [InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data="show_balance"),
         InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="show_history")],
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data="export_excel"),
         InlineKeyboardButton("ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫", callback_data="ai_help")],
    ]
    return InlineKeyboardMarkup(keyboard)


# --------- –•—ç–Ω–¥–ª–µ—Ä—ã ---------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update.effective_user.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await update.message.reply_text("üí∞ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    if not check_access(uid):
        await q.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    data = q.data
    if data == "add_income":
        context.user_data["type"] = "–î–æ—Ö–æ–¥"
        await q.edit_message_text("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å—É–º–º—É):")
    elif data == "add_expense":
        context.user_data["type"] = "–†–∞—Å—Ö–æ–¥"
        await q.edit_message_text("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    elif data == "show_balance":
        b = get_balance(q.message.chat.id)
        await q.edit_message_text(
            f"üí∞ –ë–∞–ª–∞–Ω—Å:\nUSD: {b['USD']}\nUZS: {b['UZS']}",
            reply_markup=main_menu()
        )
    elif data == "show_history":
        hist = get_history(q.message.chat.id, 10)
        if not hist:
            await q.edit_message_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=main_menu())
            return
        text = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n" + "\n".join(
            f"{ts} ‚Äî {uname}: {t} {amt} {cur} ({cat})" for t, cat, cur, amt, ts, uname in hist
        )
        await q.edit_message_text(text, reply_markup=main_menu())
    elif data == "export_excel":
        hist = get_history(q.message.chat.id, 1000)
        df = pd.DataFrame(hist, columns=["–¢–∏–ø", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–í–∞–ª—é—Ç–∞", "–°—É–º–º–∞", "–î–∞—Ç–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"])
        path = "export.xlsx"
        df.to_excel(path, index=False)
        await q.message.reply_document(open(path, "rb"))
    elif data == "ai_help":
        await q.edit_message_text("ü§ñ –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è AI (–∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –∑–∞–ø–∏—Å—å –≤–∏–¥–∞: '–µ–¥–∞ 150000 usd').")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    chat_id = update.effective_chat.id
    if not check_access(uid):
        return

    text = (update.message.text or "").strip()

    # –†–µ–∂–∏–º AI
    if context.user_data.get("await_ai"):
        context.user_data["await_ai"] = False
        ans = ai_answer(text) or "‚ö† AI –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–Ω–µ—Ç OPENAI_API_KEY)."
        await update.message.reply_text(ans, reply_markup=main_menu())
        return

    # –í–≤–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥)
    if "type" in context.user_data:
        p = parse_free_text(text)
        op_type = context.user_data["type"]
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        category = (
            p["category"] if op_type == "–î–æ—Ö–æ–¥"
            else (p["category"] if p["category"] in EXPENSE_CATEGORIES else "–î—Ä—É–≥–æ–µ")
        )
        amount = p["amount"]
        currency = p["currency"]
        if not amount:
            await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: '–ï–¥–∞ 150000' –∏–ª–∏ '–ø—Ä–æ–¥–∞–∂–∞ 100 usd'")
            return
        add_op(
            chat_id,
            uid,
            update.effective_user.first_name or str(uid),
            op_type,
            category,
            currency,
            int(amount),
            datetime.datetime.now().strftime("%Y-%m-%d %H:%M"),
        )
        await update.message.reply_text(
            f"‚úÖ {op_type}: {amount} {currency} ({category}) ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.",
            reply_markup=main_menu(),
        )
        del context.user_data["type"]
        return

    # –í–æ–ø—Ä–æ—Å ‚Üí –≤–∫–ª—é—á–∞–µ–º AI
    if text.endswith("?"):
        context.user_data["await_ai"] = True
        await update.message.reply_text("ü§ñ –í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –ñ–¥—É –æ—Ç–≤–µ—Ç –æ—Ç AI...")
        return

    # –ò–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())


# --------- –ó–∞–ø—É—Å–∫ (Webhook) ---------
def main():
    init_db()
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –í–ê–ñ–ù–û: –¥–ª—è —Ç–≤–æ–µ–π –≤–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è url_path
    path = f"/webhook/{TOKEN}"
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", "8000")),
        url_path=path,                              # <‚Äî –∫–ª—é—á–µ–≤–∞—è –ø—Ä–∞–≤–∫–∞
        webhook_url=f"{PUBLIC_URL}{path}",          # Telegram –±—É–¥–µ—Ç –±–∏—Ç—å —Å—é–¥–∞
    )


if __name__ == "__main__":
    main()

