from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import os
from aiohttp import web

TOKEN = "7611168200:AAFkdTWAz1xMawJOKF0Mu21ViFA5Oz8wblk"
AUTHORIZED_USERS = [564415186, 1038649944]

keyboard = [
    ["‚ûï –î–æ—Ö–æ–¥", "‚ûñ –†–∞—Å—Ö–æ–¥"],
    ["üìä –ë–∞–ª–∞–Ω—Å", "üí∞ –ò—Å—Ç–æ—Ä–∏—è"]
]

user_data = {}

def is_authorized(user_id):
    return user_id in AUTHORIZED_USERS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç Razzakovs. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_authorized(user_id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    text = update.message.text
    if text == "‚ûï –î–æ—Ö–æ–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")
        context.user_data["action"] = "income"
    elif text == "‚ûñ –†–∞—Å—Ö–æ–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
        context.user_data["action"] = "expense"
    elif text == "üìä –ë–∞–ª–∞–Ω—Å":
        balance = user_data.get(user_id, {}).get("balance", 0)
        await update.message.reply_text(f"üíº –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} —Å—É–º")
    elif text == "üí∞ –ò—Å—Ç–æ—Ä–∏—è":
        history = user_data.get(user_id, {}).get("history", [])
        if not history:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        else:
            msg = "\n".join(history[-10:])
            await update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n{msg}")
    elif text.replace(" ", "").isdigit():
        action = context.user_data.get("action")
        amount = int(text.replace(" ", ""))
        if user_id not in user_data:
            user_data[user_id] = {"balance": 0, "history": []}

        if action == "income":
            user_data[user_id]["balance"] += amount
            user_data[user_id]["history"].append(f"üü¢ –î–æ—Ö–æ–¥: +{amount}")
            await update.message.reply_text(f"–î–æ—Ö–æ–¥ +{amount} —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        elif action == "expense":
            user_data[user_id]["balance"] -= amount
            user_data[user_id]["history"].append(f"üî¥ –†–∞—Å—Ö–æ–¥: -{amount}")
            await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥ -{amount} —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        else:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ ‚ûï –î–æ—Ö–æ–¥ –∏–ª–∏ ‚ûñ –†–∞—Å—Ö–æ–¥.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

async def on_startup(app_: web.Application):
    webhook_url = os.environ.get("RAILWAY_STATIC_URL") + f"/webhook/{TOKEN}"
    await app.bot.set_webhook(url=webhook_url)

app.run_webhook(
    listen="0.0.0.0",
    port=int(os.environ.get("PORT", 8000)),
    path=f"/webhook/{TOKEN}",
    on_startup=on_startup
)
