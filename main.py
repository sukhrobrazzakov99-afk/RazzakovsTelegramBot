from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from datetime import datetime
import os

TOKEN = "7611168200:AAFkdTWAz1xMawJOKF0Mu21ViFA5Oz8wblk"
AUTHORIZED_USERS = [564415186, 1038649944]

keyboard = [
    ["‚ûï –î–æ—Ö–æ–¥", "‚ûñ –†–∞—Å—Ö–æ–¥"],
    ["üìä –ë–∞–ª–∞–Ω—Å", "üí∞ –ò—Å—Ç–æ—Ä–∏—è"],
    ["üîÑ –û—Ç–º–µ–Ω–∞", "üß® –°–±—Ä–æ—Å"]
]

category_keyboard = [
    ["üíº –ó–∞—Ä–ø–ª–∞—Ç–∞", "üéÅ –ë–æ–Ω—É—Å"],
    ["üçî –ï–¥–∞", "üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"],
    ["üíä –ó–¥–æ—Ä–æ–≤—å–µ", "üè† –ê—Ä–µ–Ω–¥–∞"],
    ["üîô –ù–∞–∑–∞–¥"]
]

user_data = {}

def is_authorized(user_id):
    return user_id in AUTHORIZED_USERS

def format_history_entry(entry):
    return f"{entry['emoji']} {entry['type']}: {entry['category']} {entry['sign']}{entry['amount']} —Å—É–º ‚Äî {entry['date']}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç Razzakovs. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if not is_authorized(user_id):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if user_id not in user_data:
        user_data[user_id] = {"balance": 0, "history": [], "temp": {}}

    data = user_data[user_id]

    if text == "‚ûï –î–æ—Ö–æ–¥":
        context.user_data["action"] = "income"
        reply_markup = ReplyKeyboardMarkup(category_keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", reply_markup=reply_markup)

    elif text == "‚ûñ –†–∞—Å—Ö–æ–¥":
        context.user_data["action"] = "expense"
        reply_markup = ReplyKeyboardMarkup(category_keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=reply_markup)

    elif text in sum(category_keyboard, []):
        if text == "üîô –ù–∞–∑–∞–¥":
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
            return
        context.user_data["category"] = text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")

    elif text.replace(" ", "").isdigit():
        action = context.user_data.get("action")
        category = context.user_data.get("category")
        amount = int(text.replace(" ", ""))
        now = datetime.now().strftime("%d.%m.%Y %H:%M")

        if not action or not category:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ ‚ûï –î–æ—Ö–æ–¥ –∏–ª–∏ ‚ûñ –†–∞—Å—Ö–æ–¥ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
            return

        sign = "+" if action == "income" else "-"
        emoji = "üü¢" if action == "income" else "üî¥"
        entry = {
            "type": "–î–æ—Ö–æ–¥" if action == "income" else "–†–∞—Å—Ö–æ–¥",
            "category": category,
            "amount": amount,
            "sign": sign,
            "emoji": emoji,
            "date": now
        }

        if action == "income":
            data["balance"] += amount
        else:
            data["balance"] -= amount

        data["history"].append(entry)
        data["temp"]["last"] = entry

        await update.message.reply_text(f"{emoji} {entry['type']} {category} {sign}{amount} —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)

    elif text == "üìä –ë–∞–ª–∞–Ω—Å":
        await update.message.reply_text(f"üíº –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {data['balance']} —Å—É–º")

    elif text == "üí∞ –ò—Å—Ç–æ—Ä–∏—è":
        if not data["history"]:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        else:
            msg = "
".join([format_history_entry(e) for e in data["history"][-10:]])
            await update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:
{msg}")

    elif text == "üß® –°–±—Ä–æ—Å":
        data["balance"] = 0
        data["history"] = []
        await update.message.reply_text("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã!")

    elif text == "üîÑ –û—Ç–º–µ–Ω–∞":
        last = data.get("temp", {}).get("last")
        if last:
            if last["type"] == "–î–æ—Ö–æ–¥":
                data["balance"] -= last["amount"]
            else:
                data["balance"] += last["amount"]
            data["history"].remove(last)
            data["temp"]["last"] = None
            await update.message.reply_text("‚õîÔ∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await update.message.reply_text("–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

app.run_polling()
