import os, logging, sys
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, ContextTypes, CommandHandler, MessageHandler, filters
from db import init_db, add_op, get_balance, get_history
from ai_helper import parse_free_text, ai_answer

load_dotenv()

logging.basicConfig(stream=sys.stdout, level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN','').strip()
AUTHORIZED = [int(x) for x in os.getenv('AUTHORIZED_USER_IDS','').replace(' ','').split(',') if x]
PORT = int(os.getenv('PORT','8000'))
PUBLIC_URL = os.getenv('RAILWAY_STATIC_URL','').rstrip('/')

USER_NAMES = {AUTHORIZED[i]: n for i,n in enumerate(['–°—É—Ö—Ä–æ–±','–ë—Ä–∞—Ç'][:len(AUTHORIZED)])}

MAIN_KB = ReplyKeyboardMarkup([
    [KeyboardButton('‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥'), KeyboardButton('üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥')],
    [KeyboardButton('üíº –ë–∞–ª–∞–Ω—Å'), KeyboardButton('üìö –ò—Å—Ç–æ—Ä–∏—è')],
    [KeyboardButton('ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫'), KeyboardButton('üì§ –≠–∫—Å–ø–æ—Ä—Ç')],
], resize_keyboard=True)

EXPENSE_CATS = ['üçî –ï–¥–∞','üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç','üíä –ó–¥–æ—Ä–æ–≤—å–µ','üè† –ê—Ä–µ–Ω–¥–∞','üõ† –ó–∞–∫—É–ø–∫–∏','üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è','‚ûñ –î—Ä—É–≥–æ–µ']
INCOME_CATS  = ['üíº –ó–∞—Ä–ø–ª–∞—Ç–∞','üéÅ –ë–æ–Ω—É—Å','üè™ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤','üí≥ –ü–µ—Ä–µ–≤–æ–¥','‚ûï –î—Ä—É–≥–æ–µ (–¥–æ—Ö–æ–¥)']
def cats_kb(cats): 
    rows=[cats[i:i+2] for i in range(0,len(cats),2)]
    rows.append(['üîô –ù–∞–∑–∞–¥'])
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

CURRENCIES_KB = ReplyKeyboardMarkup([[KeyboardButton('üíµ USD'), KeyboardButton('üá∫üáø UZS')], ['üîô –ù–∞–∑–∞–¥']], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user and update.effective_user.id not in AUTHORIZED:
        return
    await update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=MAIN_KB)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user and update.effective_user.id not in AUTHORIZED:
        return
    await update.message.reply_text('–ö–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É: –¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥–æ—Ö–æ–¥—ã/—Ä–∞—Å—Ö–æ–¥—ã, —Å–º–æ—Ç—Ä–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—é.')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user or user.id not in AUTHORIZED:
        return
    chat_id = update.effective_chat.id
    text = (update.message.text or '').strip()

    if text in ('üîô –ù–∞–∑–∞–¥','/start','–ú–µ–Ω—é'):
        context.user_data.clear()
        await update.message.reply_text('–ú–µ–Ω—é:', reply_markup=MAIN_KB)
        return

    if text == '‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥':
        context.user_data['mode'] = '–†–∞—Å—Ö–æ–¥'
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:', reply_markup=cats_kb(EXPENSE_CATS))
        return
    if text == 'üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥':
        context.user_data['mode'] = '–î–æ—Ö–æ–¥'
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:', reply_markup=cats_kb(INCOME_CATS))
        return

    if context.user_data.get('mode') in ('–†–∞—Å—Ö–æ–¥','–î–æ—Ö–æ–¥') and text in EXPENSE_CATS + INCOME_CATS:
        context.user_data['category'] = text.replace(' (–¥–æ—Ö–æ–¥)','')
        await update.message.reply_text('–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ?', reply_markup=CURRENCIES_KB)
        return

    if text in ('üíµ USD','üá∫üáø UZS'):
        context.user_data['currency'] = 'USD' if 'USD' in text else 'UZS'
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):', reply_markup=ReplyKeyboardMarkup([['üîô –ù–∞–∑–∞–¥']],resize_keyboard=True))
        return

    if context.user_data.get('currency') and text.isdigit():
        amount = int(text)
        op_type = context.user_data.get('mode')
        category = context.user_data.get('category')
        currency = context.user_data.get('currency')
        ts = datetime.now().strftime('%Y-%m-%d %H:%M')
        add_op(chat_id, user.id, USER_NAMES.get(user.id, str(user.id)), op_type, category, currency, amount, ts)
        context.user_data.clear()
        sign = '+' if op_type=='–î–æ—Ö–æ–¥' else '-'
        emoji = 'üü¢' if op_type=='–î–æ—Ö–æ–¥' else 'üî¥'
        await update.message.reply_text(f"{emoji} {op_type}: {category} {sign}{amount} {currency} ‚Äî {ts} ({USER_NAMES.get(user.id,'')})",
                                        reply_markup=MAIN_KB)
        return

    if text == 'üíº –ë–∞–ª–∞–Ω—Å':
        b = get_balance(chat_id)
        await update.message.reply_text(f"üíº –û–±—â–∞—è –∫–∞—Å—Å–∞:\nUSD: {b.get('USD',0)}\nUZS: {b.get('UZS',0)}", reply_markup=MAIN_KB)
        return

    if text == 'üìö –ò—Å—Ç–æ—Ä–∏—è':
        hist = get_history(chat_id, 10)
        if not hist:
            await update.message.reply_text('–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.', reply_markup=MAIN_KB); return
        lines = []
        for t,cat,cur,amt,ts,u in hist:
            sign = '+' if t=='–î–æ—Ö–æ–¥' else '-'
            emoji = 'üü¢' if t=='–î–æ—Ö–æ–¥' else 'üî¥'
            lines.append(f"{emoji} {t}: {cat} {sign}{amt} {cur} ‚Äî {ts} ({u.lower()})")
        await update.message.reply_text('\n'.join(lines), reply_markup=MAIN_KB)
        return

    if text == 'üì§ –≠–∫—Å–ø–æ—Ä—Ç':
        await update.message.reply_text('–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –¥–æ–±–∞–≤–ª—é –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è (—Ñ–∞–π–ª .xlsx –∑–∞ –ø–µ—Ä–∏–æ–¥).', reply_markup=MAIN_KB)
        return

    if text == 'ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫':
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ: '–µ–¥–∞ 150000' –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç–µ: '—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ –µ–¥—É –≤ –∏—é–ª–µ?' ‚Äî –ø–æ–ø—Ä–æ–±—É—é —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å.")
        context.user_data['ai_mode']=True
        return
    if context.user_data.get('ai_mode'):
        p = parse_free_text(text)
        if p['amount'] is not None:
            ts = datetime.now().strftime('%Y-%m-%d %H:%M')
            add_op(chat_id, user.id, USER_NAMES.get(user.id, str(user.id)), p['type'], p['category'], p['currency'], int(p['amount']), ts)
            sign = '+' if p['type']=='–î–æ—Ö–æ–¥' else '-'
            emoji = 'üü¢' if p['type']=='–î–æ—Ö–æ–¥' else 'üî¥'
            await update.message.reply_text(f"{emoji} {p['type']}: {p['category']} {sign}{p['amount']} {p['currency']} ‚Äî {ts} ({USER_NAMES.get(user.id,'')})")
        else:
            ans = ai_answer(text) or '–ù–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: "–ï–¥–∞ 150000" –∏–ª–∏ "–ø—Ä–æ–¥–∞–∂–∞ 100 usd".'
            await update.message.reply_text(ans)
        context.user_data.pop('ai_mode', None)
        return

    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=MAIN_KB)

async def on_startup(app: Application):
    init_db()
    if PUBLIC_URL and TOKEN:
        url = f"{PUBLIC_URL}/webhook/{TOKEN}"
        await app.bot.set_webhook(url)
        logging.info(f"Webhook set to: {url}")

def main():
    if not TOKEN:
        logging.error('–ù–µ—Ç TELEGRAM_BOT_TOKEN'); return
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('help', help_cmd))
    app.add_handler(CommandHandler('export', help_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.post_init = on_startup
    app.run_webhook(listen='0.0.0.0', port=int(os.getenv('PORT','8000')), secret_token=None)

if __name__ == '__main__':
    main()
